{
  parserClass="nl.theepicblock.intellijkdl.KdlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Kdl"
  psiImplClassSuffix="Impl"
  psiPackage="nl.theepicblock.intellijkdl.psi"
  psiImplPackage="nl.theepicblock.intellijkdl.psi.impl"

  elementTypeHolderClass="nl.theepicblock.intellijkdl.psi.KdlTypes"
  elementTypeClass="nl.theepicblock.intellijkdl.KdlElementType"
  tokenTypeClass="nl.theepicblock.intellijkdl.KdlTokenType"
}

kdlFile ::= nodes

//nodes ::= linespace* (node_ nodes?)? linespace*
nodes ::= linespace* (node_ linespace*)*

node_ ::= (ctxcomment node-space*)? type? identifier (node-space+ node-prop-or-arg)* (node-space* node-children ws*)? node-space* node-terminator
node-prop-or-arg ::= (ctxcomment node-space*)? (prop | value)
node-space ::= ws* escline ws* | ws+
node-children ::= (ctxcomment node-space*)? startnode-wrapper nodes endnode
startnode-wrapper ::= startnode
node-terminator ::= semicolon | newline | <<eof>>

prop ::= identifier equals value

escline ::= backslash ws* (/*single-line-comment |*/ newline)

value ::= type? (string-literal | number | keyword)
string-literal ::= string
linespace ::= newline | ws //| single-line-comment
ws ::= bom | unicodespace //| multi-line-comment
type ::= starttype identifier endtype

identifier ::= string | bareidentifier

number ::= decimal | hex | octal | binary

keyword ::= boolean | null